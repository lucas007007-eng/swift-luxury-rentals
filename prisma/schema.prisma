generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
}

model City {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  properties Property[]
}

model Property {
  id          String   @id @default(cuid())
  extId       String?  @unique
  title       String
  city        City     @relation(fields: [cityId], references: [id])
  cityId      String
  address     String?
  priceMonthly Int?
  currency    String   @default("EUR")
  images      PropertyImage[]
  calendars   CalendarDay[]
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PropertyImage {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  url        String
  position   Int      @default(0)
}

model CalendarDay {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  date       DateTime
  available  Boolean  @default(true)
  priceNight Int?
  @@unique([propertyId, date])
}

model Booking {
  id          String    @id @default(cuid())
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  checkin     DateTime
  checkout    DateTime
  status      String    @default("hold") // hold, confirmed, cancelled
  totalCents  Int       @default(0)
  confirmedAt DateTime?
  cancelledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payments    Payment[]

  @@index([status])
  @@index([checkin])
  @@index([confirmedAt])
  @@index([cancelledAt])
}

model Payment {
  id          String   @id @default(cuid())
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String
  provider    String   // stripe|coinbase
  intentId    String?
  status      String   @default("created")
  purpose     String   @default("other") // deposit|first_period|move_in_fee|other
  refundedAt  DateTime?
  receivedAt  DateTime?
  dueAt       DateTime?
  amountCents Int
  currency    String   @default("EUR")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([bookingId])
  @@index([purpose])
  @@index([status])
  @@index([dueAt])
}

model AdminOverride {
  id             String   @id @default(cuid())
  propertyExtId  String   @unique
  data           Json
  updatedAt      DateTime @updatedAt
}

model TimerSession {
  id               String   @id @default(cuid())
  promptingSeconds Int      @default(0)
  codingSeconds    Int      @default(0)
  lastActivity     DateTime @default(now())
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("timer_sessions")
}


